<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>S3 on GGfu Personal Study - 學習筆記</title><link>https://ggfu0114.github.io/tags/s3/</link><description>Recent content in S3 on GGfu Personal Study - 學習筆記</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><lastBuildDate>Sun, 06 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://ggfu0114.github.io/tags/s3/index.xml" rel="self" type="application/rss+xml"/><item><title>Deploy s3 bucket by cloudformation</title><link>https://ggfu0114.github.io/posts/deploy-s3-bucket-by-cloudformation/</link><pubDate>Sun, 06 Mar 2022 00:00:00 +0000</pubDate><guid>https://ggfu0114.github.io/posts/deploy-s3-bucket-by-cloudformation/</guid><description>Deploy s3 bucket by cloudformation 預先準備 需要先把 aws cli 給裝起來
利用CLI可以把預先寫好的基礎建設結構佈署到AWS上，下面是簡單部署一個S3的bucket範例。
aws cloudformation deploy --stack-name paulteststack --template-file ./s3-create-template.json --stack-name: 想要deploy到哪一個cloudformation stack裡 --template-file: template 檔案的所在位置 還有很多參數可以設定，詳情可以參考 create-stack
{ &amp;#34;AWSTemplateFormatVersion&amp;#34;: &amp;#34;2010-09-09&amp;#34;, &amp;#34;Description&amp;#34;: &amp;#34;Create S3 bucket on AWS&amp;#34;, &amp;#34;Resources&amp;#34;: { &amp;#34;S3Test&amp;#34;: { &amp;#34;Type&amp;#34;: &amp;#34;AWS::S3::Bucket&amp;#34;, &amp;#34;Properties&amp;#34;: { &amp;#34;BucketName&amp;#34;: &amp;#34;paul-test-1495611707&amp;#34; } } } } template 可以依照情境進行更進階的調整，例如調整bucket的CROS讓外部的前端程式可以進行存取。 { &amp;#34;AWSTemplateFormatVersion&amp;#34;: &amp;#34;2010-09-09&amp;#34;, &amp;#34;Description&amp;#34;: &amp;#34;Create S3 bucket on AWS&amp;#34;, &amp;#34;Resources&amp;#34;: { &amp;#34;S3Test&amp;#34;: { &amp;#34;Type&amp;#34;: &amp;#34;AWS::S3::Bucket&amp;#34;, &amp;#34;Properties&amp;#34;: { &amp;#34;BucketName&amp;#34;: &amp;#34;paul-test-1495611707&amp;#34;, &amp;#34;AccessControl&amp;#34;: &amp;#34;PublicReadWrite&amp;#34;, &amp;#34;CorsConfiguration&amp;#34;: { &amp;#34;CorsRules&amp;#34;: [ { &amp;#34;AllowedHeaders&amp;#34;: [ &amp;#34;*&amp;#34; ], &amp;#34;AllowedMethods&amp;#34;: [ &amp;#34;GET&amp;#34; ], &amp;#34;AllowedOrigins&amp;#34;: [ &amp;#34;*&amp;#34; ], &amp;#34;ExposedHeaders&amp;#34;: [ &amp;#34;Date&amp;#34; ], &amp;#34;Id&amp;#34;: &amp;#34;myCORSRuleId1&amp;#34;, &amp;#34;MaxAge&amp;#34;: &amp;#34;3600&amp;#34; }, { &amp;#34;AllowedHeaders&amp;#34;: [ &amp;#34;x-amz-*&amp;#34; ], &amp;#34;AllowedMethods&amp;#34;: [ &amp;#34;DELETE&amp;#34; ], &amp;#34;AllowedOrigins&amp;#34;: [ &amp;#34;http://www.</description></item><item><title>AWS S3 REST 數位簽章與驗證</title><link>https://ggfu0114.github.io/posts/aws_s3_signed_url/</link><pubDate>Thu, 31 Dec 2020 00:00:00 +0000</pubDate><guid>https://ggfu0114.github.io/posts/aws_s3_signed_url/</guid><description>AWS S3 REST簽章與驗證 假設在S3裡的物件只設定給 &amp;ldquo;authenticated AWS user&amp;rdquo; 操作，那我們要如何利用數位簽章讓使用者可以透過 api resquest 去做身份認可(identity)並操作S3裏面的物件。 假設在S3上我們有一個name為 wisigntest 的bucket，裏面存在一個名為hello.jpg的物件，設定為 &amp;ldquo;authenticated AWS user&amp;rdquo; 可以R/W。我們將紀錄如何使用API去存取S3物件。 簡易瀏覽物件
GET /hello.jpg HTTP/1.1 Host: https://wisigntest.s3-ap-northeast-1.amazonaws.com Date: Fri, 28 Apr 2017 05:56:29 GMT Authorization: AWS AKIAIOSFODNN7EXAMPLE:frJIUN8DYpKDtOLCwo//yllqDzg= 下面是我用Postman去讀取S3檔案的畫面 The Authentication Header
下面的格式是主要傳送給 API 的 Header 上要添加的 Authorization 資訊，透過Signature，AWS可以驗證此次的操作是否有效。
Authorization: AWS {AWSAccessKeyId}:{Signature} 下面是 Nodejs 計算的Signature程式碼
var crypto = require(&amp;#34;crypto&amp;#34;); // from IAM role var secret_access_key = &amp;#39;64nd6BY7gTPDspq54gQcRth5dvORNdDvqL4BZ5zd&amp;#39;; var access_key_id = &amp;#39;AKIAIUHT2BNZP65ADZKQ&amp;#39; var StringToSign = &amp;#34;GET&amp;#34; + &amp;#34;\n&amp;#34; + &amp;#34;&amp;#34; + &amp;#34;\n&amp;#34; + &amp;#34;&amp;#34; + &amp;#34;\n&amp;#34; + new Date().</description></item></channel></rss>