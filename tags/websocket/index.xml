<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>websocket on GGfu Personal Study - 學習筆記</title><link>https://ggfu0114.github.io/tags/websocket/</link><description>Recent content in websocket on GGfu Personal Study - 學習筆記</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><lastBuildDate>Thu, 31 Dec 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://ggfu0114.github.io/tags/websocket/index.xml" rel="self" type="application/rss+xml"/><item><title>AWS IoT with websocket</title><link>https://ggfu0114.github.io/posts/aws_iot_websocket/</link><pubDate>Thu, 31 Dec 2020 00:00:00 +0000</pubDate><guid>https://ggfu0114.github.io/posts/aws_iot_websocket/</guid><description>在大多數的瀏覽器都有支援websocket的protocol前提下，實作網頁即時接收訊息的功能上，我們希望每個網頁都可以當作是一個mqtt的裝置，如此一來就可以即時推播給各個網頁，也可以即時的接收到來自client端的訊息。 AWS在IoT的服務上也有做到MQTT Over the WebSocket Protocol，透過AWS SigV4的身份認證, 利用Port 443，我們可以透過網頁連線上AWS IoT的服務。 server side
以下是server端需要產出帶有authentication的query url，使用上，前端只需要將url用get的方式呼叫就可以連接上IoT。 function SigV4Utils() {} SigV4Utils.getSignatureKey = function (key, date, region, service) { var kDate = AWS.util.crypto.hmac(&amp;#39;AWS4&amp;#39; + key, date, &amp;#39;buffer&amp;#39;); var kRegion = AWS.util.crypto.hmac(kDate, region, &amp;#39;buffer&amp;#39;); var kService = AWS.util.crypto.hmac(kRegion, service, &amp;#39;buffer&amp;#39;); var kCredentials = AWS.util.crypto.hmac(kService, &amp;#39;aws4_request&amp;#39;, &amp;#39;buffer&amp;#39;); return kCredentials; }; SigV4Utils.getSignedUrl = function(host, region, ) { var datetime = AWS.util.date.iso8601(new Date()).replace(/[:\-]|\.\d{3}/g, &amp;#39;&amp;#39;); var date = datetime.</description></item></channel></rss>